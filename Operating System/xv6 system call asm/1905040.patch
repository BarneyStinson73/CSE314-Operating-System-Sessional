diff --git a/1905040.patch b/1905040.patch
new file mode 100644
index 0000000..8d9be37
--- /dev/null
+++ b/1905040.patch
@@ -0,0 +1,388 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..b3663db 100644
+--- a/Makefile
++++ b/Makefile
+@@ -132,6 +132,8 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_trace\
++	$U/_history\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..1746974 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct syscall_stat;
+ 
+ // bio.c
+ void            binit(void);
+@@ -106,6 +107,8 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int trace(int);
++int history(int,struct syscall_stat *);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+@@ -140,6 +143,7 @@ void            argaddr(int, uint64 *);
+ int             fetchstr(uint64, char*, int);
+ int             fetchaddr(uint64, uint64*);
+ void            syscall();
++void            syscall_init();
+ 
+ // trap.c
+ extern uint     ticks;
+diff --git a/kernel/main.c b/kernel/main.c
+index f0d3171..9afa1d8 100644
+--- a/kernel/main.c
++++ b/kernel/main.c
+@@ -28,6 +28,7 @@ main()
+     iinit();         // inode table
+     fileinit();      // file table
+     virtio_disk_init(); // emulated hard disk
++    syscall_init();
+     userinit();      // first user process
+     __sync_synchronize();
+     started = 1;
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..218022d 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -124,6 +124,11 @@ allocproc(void)
+ found:
+   p->pid = allocpid();
+   p->state = USED;
++  p->flag=0;
++  for(int zz=0;zz<6;zz++)
++  {
++    p->type[zz]=77;
++  }
+ 
+   // Allocate a trapframe page.
+   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+@@ -681,3 +686,9 @@ procdump(void)
+     printf("\n");
+   }
+ }
++int trace(int mask)
++{
++  struct proc *p = myproc();
++  p->flag = mask;
++  return 0;
++}
+\ No newline at end of file
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..58597e7 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,15 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  
++  uint64 flag;
++  int type[6];
++  char words[6][12];
++};
++
++struct syscall_stat{
++struct spinlock s;
++char syscall_name[16];
++int count;
++int accum_time;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..c2dc4da 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -57,6 +57,11 @@ void
+ argint(int n, int *ip)
+ {
+   *ip = argraw(n);
++  struct proc *p = myproc();
++  if (p->flag == p->trapframe->a7)
++  {
++    p->type[n] = 0;
++  }
+ }
+ 
+ // Retrieve an argument as a pointer.
+@@ -66,6 +71,11 @@ void
+ argaddr(int n, uint64 *ip)
+ {
+   *ip = argraw(n);
++  struct proc *p = myproc();
++  if (p->flag == p->trapframe->a7)
++  {
++    p->type[n] = 1;
++  }
+ }
+ 
+ // Fetch the nth word-sized system call argument as a null-terminated string.
+@@ -76,6 +86,12 @@ argstr(int n, char *buf, int max)
+ {
+   uint64 addr;
+   argaddr(n, &addr);
++  struct proc *p = myproc();
++  if (p->flag == p->trapframe->a7)
++  {
++    p->type[n] = 2;
++    fetchstr(addr, p->words[n], max);
++  }
+   return fetchstr(addr, buf, max);
+ }
+ 
+@@ -101,6 +117,8 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_trace(void);
++extern uint64 sys_history(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,8 +144,45 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_trace] sys_trace,
++[SYS_history] sys_history,
+ };
+-
++char system_array[][16] = {
++    [SYS_fork] "fork",
++    [SYS_exit] "exit",
++    [SYS_wait] "wait",
++    [SYS_pipe] "pipe",
++    [SYS_read] "read",
++    [SYS_kill] "kill",
++    [SYS_exec] "exec",
++    [SYS_fstat] "fstat",
++    [SYS_chdir] "chdir",
++    [SYS_dup] "dup",
++    [SYS_getpid] "getpid",
++    [SYS_sbrk] "sbrk",
++    [SYS_sleep] "sleep",
++    [SYS_uptime] "uptime",
++    [SYS_open] "open",
++    [SYS_write] "write",
++    [SYS_mknod] "mknod",
++    [SYS_unlink] "unlink",
++    [SYS_link] "link",
++    [SYS_mkdir] "mkdir",
++    [SYS_close] "close",
++    [SYS_trace] "trace",
++    [SYS_history] "history",
++};
++struct syscall_stat array[24];
++void syscall_init()
++{
++  for (int i = 0; i <= 23; i++)
++  {
++    initlock(&array[i].s, system_array[i]);
++    array[i].count = 0;
++    array[i].accum_time = 0;
++    strncpy(array[i].syscall_name, system_array[i], 16);
++  }
++}
+ void
+ syscall(void)
+ {
+@@ -138,7 +193,51 @@ syscall(void)
+   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+     // Use num to lookup the system call function for num, call it,
+     // and store its return value in p->trapframe->a0
++    uint64 arg[6];
++    arg[0] = p->trapframe->a0;
++    arg[1] = p->trapframe->a1;
++    arg[2] = p->trapframe->a2;
++    arg[3] = p->trapframe->a3;
++    arg[4] = p->trapframe->a4;
++    arg[5] = p->trapframe->a5;
++
++    acquire(&tickslock);
++    uint64 cycle_start = ticks;
++    release(&tickslock);
+     p->trapframe->a0 = syscalls[num]();
++    acquire(&tickslock);
++    uint64 cycle_end = ticks;
++    release(&tickslock);
++    acquire(&array[num].s);
++    array[num].count++;
++    array[num].accum_time += (cycle_end - cycle_start);
++    release(&array[num].s);
++    if (num == p->flag)
++    {
++
++      printf("pid: %d, syscall: %s, args: (",
++             p->pid, system_array[num]);
++
++      for (int i = 0; i < 6; i++)
++      {
++
++        if (p->type[i] == 0)
++        {
++          printf("%d ,", arg[i]);
++        }
++        else if (p->type[i] == 1)
++        {
++          printf("%p ,", arg[i]);
++        }
++        else if (p->type[i] == 2)
++        {
++          // fetchstr(arg[i], temp, 12);
++          // printf("%s ,", temp);
++          printf("%s ,", p->words[i]);
++        }
++      }
++      printf("\b), return: %d\n", p->trapframe->a0);
++    }
+   } else {
+     printf("%d %s: unknown sys call %d\n",
+             p->pid, p->name, num);
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..feb9a19 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_trace  22
++#define SYS_history 23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..6289cd9 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,25 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++int sys_trace(void)
++{
++  int num;
++  argint(0, &num);
++  struct proc *p = myproc();
++  p->flag = num;
++  return 1;
++}
++extern struct syscall_stat array[25];
++uint64 sys_history(void){
++  
++  int a;
++  argint(0,&a);
++  uint64 b;
++  argaddr(1,&b);
++  struct proc *p = myproc();
++  if(copyout(p->pagetable, b, (char *)&array[a], sizeof(array[a])) < 0){
++    
++      return -1;
++  }
++    return 0;
++}
+diff --git a/user/history.c b/user/history.c
+new file mode 100644
+index 0000000..ad4d883
+--- /dev/null
++++ b/user/history.c
+@@ -0,0 +1,28 @@
++#include "kernel/param.h"
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++#include "kernel/syscall.h"
++#include "kernel/spinlock.h"
++#include "kernel/riscv.h"
++#include "kernel/proc.h"
++
++int
++main(int argc, char *argv[])
++{
++  int i=0;
++  struct syscall_stat s;
++
++if(argc == 1){
++    for(int k=1;k<=23;k++){
++        history(k,&s);
++        printf("%d:   syscall: %s, #:%d, time:%d\n",k,s.syscall_name,s.count,s.accum_time);
++    }
++  }
++  else if(argc==2){
++    i=atoi(argv[1]);
++    history(i,&s);
++    printf("%d:   syscall: %s, #:%d, time:%d\n",i,s.syscall_name,s.count,s.accum_time);
++  }
++  exit(0);
++}
+diff --git a/user/trace.c b/user/trace.c
+new file mode 100644
+index 0000000..1e322ce
+--- /dev/null
++++ b/user/trace.c
+@@ -0,0 +1,27 @@
++#include "kernel/param.h"
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int
++main(int argc, char *argv[])
++{
++  int i;
++  char *nargv[MAXARG];
++
++  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
++    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
++    exit(1);
++  }
++
++  if (trace(atoi(argv[1])) < 0) {
++    fprintf(2, "%s: trace failed\n", argv[0]);
++    exit(1);
++  }
++  
++  for(i = 2; i < argc && i < MAXARG; i++){
++    nargv[i-2] = argv[i];
++  }
++  exec(nargv[0], nargv);
++  exit(0);
++}
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..4517db1 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -1,5 +1,5 @@
+ struct stat;
+-
++struct syscall_stat;
+ // system calls
+ int fork(void);
+ int exit(int) __attribute__((noreturn));
+@@ -22,6 +22,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int trace(int);
++int history(int,struct syscall_stat*);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..83a6248 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("trace");
++entry("history");
+\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..57cd232 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_shutdown\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..c8c8912 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int trace(int);
+int history(int,struct syscall_stat *);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -124,6 +127,9 @@ void            releasesleep(struct sleeplock*);
 int             holdingsleep(struct sleeplock*);
 void            initsleeplock(struct sleeplock*, char*);
 
+// start.c
+void halt(void);
+
 // string.c
 int             memcmp(const void*, const void*, uint);
 void*           memmove(void*, const void*, uint);
@@ -140,6 +146,7 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+void            syscall_init();
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..1a9aa58 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : halt flag set by halt.
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # halt if halt() has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +127,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..9afa1d8 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -28,6 +28,7 @@ main()
     iinit();         // inode table
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
+    syscall_init();
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..218022d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,11 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->flag=0;
+  for(int zz=0;zz<6;zz++)
+  {
+    p->type[zz]=77;
+  }
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -681,3 +686,9 @@ procdump(void)
     printf("\n");
   }
 }
+int trace(int mask)
+{
+  struct proc *p = myproc();
+  p->flag = mask;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..58597e7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  uint64 flag;
+  int type[6];
+  char words[6][12];
+};
+
+struct syscall_stat{
+struct spinlock s;
+char syscall_name[16];
+int count;
+int accum_time;
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..889a473 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -8,17 +8,16 @@ void main();
 void timerinit();
 
 // entry.S needs one stack per CPU.
-__attribute__ ((aligned (16))) char stack0[4096 * NCPU];
+__attribute__((aligned(16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
 
 // entry.S jumps here in machine mode on stack0.
-void
-start()
+void start()
 {
   // set M Previous Privilege mode to Supervisor, for mret.
   unsigned long x = r_mstatus();
@@ -59,15 +58,14 @@ start()
 // at timervec in kernelvec.S,
 // which turns them into software interrupts for
 // devintr() in trap.c.
-void
-timerinit()
+void timerinit()
 {
   // each CPU has a separate source of timer interrupts.
   int id = r_mhartid();
 
   // ask the CLINT for a timer interrupt.
   int interval = 1000000; // cycles; about 1/10th second in qemu.
-  *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
+  *(uint64 *)CLINT_MTIMECMP(id) = *(uint64 *)CLINT_MTIME + interval;
 
   // prepare information in scratch[] for timervec.
   // scratch[0..2] : space for timervec to save registers.
@@ -76,6 +74,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +86,8 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void halt()
+{
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..e76f669 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -57,6 +57,11 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  struct proc *p = myproc();
+  if (p->flag == p->trapframe->a7)
+  {
+    p->type[n] = 0;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +71,11 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  struct proc *p = myproc();
+  if (p->flag == p->trapframe->a7)
+  {
+    p->type[n] = 1;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,6 +86,12 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
+  struct proc *p = myproc();
+  if (p->flag == p->trapframe->a7)
+  {
+    p->type[n] = 2;
+    fetchstr(addr, p->words[n], max);
+  }
   return fetchstr(addr, buf, max);
 }
 
@@ -101,6 +117,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_shutdown(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +145,47 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace] sys_trace,
+[SYS_history] sys_history,
+[SYS_shutdown] sys_shutdown,
 };
-
+char system_array[][16] = {
+    [SYS_fork] "fork",
+    [SYS_exit] "exit",
+    [SYS_wait] "wait",
+    [SYS_pipe] "pipe",
+    [SYS_read] "read",
+    [SYS_kill] "kill",
+    [SYS_exec] "exec",
+    [SYS_fstat] "fstat",
+    [SYS_chdir] "chdir",
+    [SYS_dup] "dup",
+    [SYS_getpid] "getpid",
+    [SYS_sbrk] "sbrk",
+    [SYS_sleep] "sleep",
+    [SYS_uptime] "uptime",
+    [SYS_open] "open",
+    [SYS_write] "write",
+    [SYS_mknod] "mknod",
+    [SYS_unlink] "unlink",
+    [SYS_link] "link",
+    [SYS_mkdir] "mkdir",
+    [SYS_close] "close",
+    [SYS_trace] "trace",
+    [SYS_history] "history",
+    [SYS_shutdown] "shutdown",
+};
+struct syscall_stat array[25];
+void syscall_init()
+{
+  for (int i = 0; i <= 24; i++)
+  {
+    initlock(&array[i].s, system_array[i]);
+    array[i].count = 0;
+    array[i].accum_time = 0;
+    strncpy(array[i].syscall_name, system_array[i], 16);
+  }
+}
 void
 syscall(void)
 {
@@ -138,7 +196,51 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    uint64 arg[6];
+    arg[0] = p->trapframe->a0;
+    arg[1] = p->trapframe->a1;
+    arg[2] = p->trapframe->a2;
+    arg[3] = p->trapframe->a3;
+    arg[4] = p->trapframe->a4;
+    arg[5] = p->trapframe->a5;
+
+    acquire(&tickslock);
+    uint64 cycle_start = ticks;
+    release(&tickslock);
     p->trapframe->a0 = syscalls[num]();
+    acquire(&tickslock);
+    uint64 cycle_end = ticks;
+    release(&tickslock);
+    acquire(&array[num].s);
+    array[num].count++;
+    array[num].accum_time += (cycle_end - cycle_start);
+    release(&array[num].s);
+    if (num == p->flag)
+    {
+
+      printf("pid: %d, syscall: %s, args: (",
+             p->pid, system_array[num]);
+
+      for (int i = 0; i < 6; i++)
+      {
+
+        if (p->type[i] == 0)
+        {
+          printf("%d ,", arg[i]);
+        }
+        else if (p->type[i] == 1)
+        {
+          printf("%p ,", arg[i]);
+        }
+        else if (p->type[i] == 2)
+        {
+          // fetchstr(arg[i], temp, 12);
+          // printf("%s ,", temp);
+          printf("%s ,", p->words[i]);
+        }
+      }
+      printf("\b), return: %d\n", p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..387dee8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
+#define SYS_fork 1
+#define SYS_exit 2
+#define SYS_wait 3
+#define SYS_pipe 4
+#define SYS_read 5
+#define SYS_kill 6
+#define SYS_exec 7
+#define SYS_fstat 8
+#define SYS_chdir 9
+#define SYS_dup 10
 #define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
+#define SYS_sbrk 12
+#define SYS_sleep 13
 #define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
+#define SYS_open 15
+#define SYS_write 16
+#define SYS_mknod 17
 #define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_link 19
+#define SYS_mkdir 20
+#define SYS_close 21
+#define SYS_trace 22
+#define SYS_history 23
+#define SYS_shutdown 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..baefa9a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+int sys_trace(void)
+{
+  int num;
+  argint(0, &num);
+  struct proc *p = myproc();
+  p->flag = num;
+  return 1;
+}
+extern struct syscall_stat array[25];
+uint64 sys_history(void){
+  
+  int a;
+  argint(0,&a);
+  uint64 b;
+  argaddr(1,&b);
+  struct proc *p = myproc();
+  if(copyout(p->pagetable, b, (char *)&array[a], sizeof(array[a])) < 0){
+    
+      return -1;
+  }
+    return 0;
+}
+
+uint64 sys_shutdown (void) {
+  halt();
+  return 0;
+}
+
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..88e907d
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,28 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/syscall.h"
+#include "kernel/spinlock.h"
+#include "kernel/riscv.h"
+#include "kernel/proc.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i=0;
+  struct syscall_stat s;
+
+if(argc == 1){
+    for(int k=1;k<=24;k++){
+        history(k,&s);
+        printf("%d:   syscall: %s, #:%d, time:%d\n",k,s.syscall_name,s.count,s.accum_time);
+    }
+  }
+  else if(argc==2){
+    i=atoi(argv[1]);
+    history(i,&s);
+    printf("%d:   syscall: %s, #:%d, time:%d\n",i,s.syscall_name,s.count,s.accum_time);
+  }
+  exit(0);
+}
diff --git a/user/shutdown.c b/user/shutdown.c
new file mode 100644
index 0000000..2f40cb3
--- /dev/null
+++ b/user/shutdown.c
@@ -0,0 +1,11 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/syscall.h"
+
+int main(int argc, char *argv[])
+{
+    shutdown();
+    return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..a30a09a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct syscall_stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int,struct syscall_stat*);
+int shutdown(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8087867 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("shutdown");
\ No newline at end of file
